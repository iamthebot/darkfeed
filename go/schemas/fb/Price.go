// automatically generated by the FlatBuffers compiler, do not modify

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Price struct {
	_tab flatbuffers.Struct
}

func (rcv *Price) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Price) Table() flatbuffers.Table {
	return rcv._tab.Table
}

///< price in "precision" units
func (rcv *Price) Price() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}

///< price in "precision" units
func (rcv *Price) MutatePrice(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

///< power of 10 representing magnitude of price. Eg; -2 for cents
func (rcv *Price) Precision() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}

///< power of 10 representing magnitude of price. Eg; -2 for cents
func (rcv *Price) MutatePrecision(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

///< minimum quoted tick size in "precision" units. Eg; precision of -2 and precision_scalar of 5 means "price" is quoted in cents with a minimum tick of 5 cents. price must be a multiple of tick_size
func (rcv *Price) TickSize() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(5))
}

///< minimum quoted tick size in "precision" units. Eg; precision of -2 and precision_scalar of 5 means "price" is quoted in cents with a minimum tick of 5 cents. price must be a multiple of tick_size
func (rcv *Price) MutateTickSize(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(5), n)
}

///< base currency for this price
func (rcv *Price) Currency() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(6))
}

///< base currency for this price
func (rcv *Price) MutateCurrency(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(6), n)
}

func CreatePrice(builder *flatbuffers.Builder, price uint32, precision int8, tickSize byte, currency byte) flatbuffers.UOffsetT {
	builder.Prep(4, 8)
	builder.Pad(1)
	builder.PrependByte(currency)
	builder.PrependByte(tickSize)
	builder.PrependInt8(precision)
	builder.PrependUint32(price)
	return builder.Offset()
}
