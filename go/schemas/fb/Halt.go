// automatically generated by the FlatBuffers compiler, do not modify

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Halt struct {
	_tab flatbuffers.Table
}

func GetRootAsHalt(buf []byte, offset flatbuffers.UOffsetT) *Halt {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Halt{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Halt) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Halt) Table() flatbuffers.Table {
	return rcv._tab
}

///< Tickcaster monotonically increasing sequence number
func (rcv *Halt) SeqNum() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

///< Tickcaster monotonically increasing sequence number
func (rcv *Halt) MutateSeqNum(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

///< Symbol corresponding to the halt
func (rcv *Halt) Symbol(obj *Symbol) *Symbol {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Symbol)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///< Symbol corresponding to the halt
///< Exchange (if any) issuing the halt.
func (rcv *Halt) ReportingExg() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

///< Exchange (if any) issuing the halt.
func (rcv *Halt) MutateReportingExg(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

///< Timestamp when the halt was issued
func (rcv *Halt) Ts(obj *Timestamp) *Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///< Timestamp when the halt was issued
///< Type of halt
func (rcv *Halt) HaltType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

///< Type of halt
func (rcv *Halt) MutateHaltType(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

///< Symbol's current status
func (rcv *Halt) HaltStatus() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

///< Symbol's current status
func (rcv *Halt) MutateHaltStatus(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func HaltStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func HaltAddSeqNum(builder *flatbuffers.Builder, seqNum uint64) {
	builder.PrependUint64Slot(0, seqNum, 0)
}
func HaltAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func HaltAddReportingExg(builder *flatbuffers.Builder, reportingExg byte) {
	builder.PrependByteSlot(2, reportingExg, 0)
}
func HaltAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(ts), 0)
}
func HaltAddHaltType(builder *flatbuffers.Builder, haltType byte) {
	builder.PrependByteSlot(4, haltType, 0)
}
func HaltAddHaltStatus(builder *flatbuffers.Builder, haltStatus byte) {
	builder.PrependByteSlot(5, haltStatus, 0)
}
func HaltEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
