// automatically generated by the FlatBuffers compiler, do not modify

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Symbol struct {
	_tab flatbuffers.Table
}

func GetRootAsSymbol(buf []byte, offset flatbuffers.UOffsetT) *Symbol {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Symbol{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Symbol) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Symbol) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Symbol) Root() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Symbol) ListingExg() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Symbol) MutateListingExg(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Symbol) IssueType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Symbol) MutateIssueType(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Symbol) Series() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Symbol) MutateSeries(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func SymbolStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SymbolAddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(root), 0)
}
func SymbolAddListingExg(builder *flatbuffers.Builder, listingExg byte) {
	builder.PrependByteSlot(1, listingExg, 0)
}
func SymbolAddIssueType(builder *flatbuffers.Builder, issueType byte) {
	builder.PrependByteSlot(2, issueType, 0)
}
func SymbolAddSeries(builder *flatbuffers.Builder, series int8) {
	builder.PrependInt8Slot(3, series, 0)
}
func SymbolEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
