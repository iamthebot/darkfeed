// automatically generated by the FlatBuffers compiler, do not modify

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EquityQuote struct {
	_tab flatbuffers.Table
}

func GetRootAsEquityQuote(buf []byte, offset flatbuffers.UOffsetT) *EquityQuote {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EquityQuote{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *EquityQuote) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EquityQuote) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EquityQuote) SeqNum() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquityQuote) MutateSeqNum(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *EquityQuote) Symbol(obj *Symbol) *Symbol {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Symbol)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EquityQuote) ReportingExg() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquityQuote) MutateReportingExg(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *EquityQuote) Ts(obj *Timestamp) *Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EquityQuote) Bid(obj *Price) *Price {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Price)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EquityQuote) Ask(obj *Price) *Price {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Price)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EquityQuote) BidSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquityQuote) MutateBidSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *EquityQuote) AskSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquityQuote) MutateAskSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *EquityQuote) Condition() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EquityQuote) MutateCondition(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func EquityQuoteStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func EquityQuoteAddSeqNum(builder *flatbuffers.Builder, seqNum uint64) {
	builder.PrependUint64Slot(0, seqNum, 0)
}
func EquityQuoteAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func EquityQuoteAddReportingExg(builder *flatbuffers.Builder, reportingExg byte) {
	builder.PrependByteSlot(2, reportingExg, 0)
}
func EquityQuoteAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(ts), 0)
}
func EquityQuoteAddBid(builder *flatbuffers.Builder, bid flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(bid), 0)
}
func EquityQuoteAddAsk(builder *flatbuffers.Builder, ask flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(ask), 0)
}
func EquityQuoteAddBidSize(builder *flatbuffers.Builder, bidSize uint32) {
	builder.PrependUint32Slot(6, bidSize, 0)
}
func EquityQuoteAddAskSize(builder *flatbuffers.Builder, askSize uint32) {
	builder.PrependUint32Slot(7, askSize, 0)
}
func EquityQuoteAddCondition(builder *flatbuffers.Builder, condition byte) {
	builder.PrependByteSlot(8, condition, 0)
}
func EquityQuoteEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
