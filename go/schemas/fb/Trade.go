// automatically generated by the FlatBuffers compiler, do not modify

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Trade struct {
	_tab flatbuffers.Table
}

func GetRootAsTrade(buf []byte, offset flatbuffers.UOffsetT) *Trade {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Trade{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Trade) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Trade) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Trade) SeqNum() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Trade) MutateSeqNum(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Trade) Symbol(obj *Symbol) *Symbol {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Symbol)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Trade) ReportingExg() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Trade) MutateReportingExg(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Trade) Ts(obj *Timestamp) *Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Trade) Price(obj *Price) *Price {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Price)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Trade) Size() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Trade) MutateSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *Trade) Vol() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Trade) MutateVol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *Trade) TVol() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Trade) MutateTVol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *Trade) Condition() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Trade) MutateCondition(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func TradeStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func TradeAddSeqNum(builder *flatbuffers.Builder, seqNum uint64) {
	builder.PrependUint64Slot(0, seqNum, 0)
}
func TradeAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func TradeAddReportingExg(builder *flatbuffers.Builder, reportingExg byte) {
	builder.PrependByteSlot(2, reportingExg, 0)
}
func TradeAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(ts), 0)
}
func TradeAddPrice(builder *flatbuffers.Builder, price flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(price), 0)
}
func TradeAddSize(builder *flatbuffers.Builder, size uint32) {
	builder.PrependUint32Slot(5, size, 0)
}
func TradeAddVol(builder *flatbuffers.Builder, vol uint32) {
	builder.PrependUint32Slot(6, vol, 0)
}
func TradeAddTVol(builder *flatbuffers.Builder, tVol uint32) {
	builder.PrependUint32Slot(7, tVol, 0)
}
func TradeAddCondition(builder *flatbuffers.Builder, condition byte) {
	builder.PrependByteSlot(8, condition, 0)
}
func TradeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
