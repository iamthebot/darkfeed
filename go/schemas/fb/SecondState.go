// automatically generated by the FlatBuffers compiler, do not modify

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SecondState struct {
	_tab flatbuffers.Struct
}

func (rcv *SecondState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SecondState) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *SecondState) Ts(obj *Timestamp) *Timestamp {
	if obj == nil {
		obj = new(Timestamp)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}
func (rcv *SecondState) Bid() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *SecondState) MutateBid(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *SecondState) Ask() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *SecondState) MutateAsk(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func (rcv *SecondState) Last() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(20))
}
func (rcv *SecondState) MutateLast(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(20), n)
}

func (rcv *SecondState) Low() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(24))
}
func (rcv *SecondState) MutateLow(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(24), n)
}

func (rcv *SecondState) High() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(28))
}
func (rcv *SecondState) MutateHigh(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(28), n)
}

func (rcv *SecondState) Vol() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(32))
}
func (rcv *SecondState) MutateVol(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(32), n)
}

func (rcv *SecondState) TVol() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(36))
}
func (rcv *SecondState) MutateTVol(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(36), n)
}

func (rcv *SecondState) Halt() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(40))
}
func (rcv *SecondState) MutateHalt(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(40), n)
}

func CreateSecondState(builder *flatbuffers.Builder, ts_unix uint32, ts_ns uint32, ts_offset int8, ts_dst byte, bid uint32, ask uint32, last uint32, low uint32, high uint32, vol uint32, tVol uint32, halt byte) flatbuffers.UOffsetT {
	builder.Prep(4, 44)
	builder.Pad(3)
	builder.PrependByte(halt)
	builder.PrependUint32(tVol)
	builder.PrependUint32(vol)
	builder.PrependUint32(high)
	builder.PrependUint32(low)
	builder.PrependUint32(last)
	builder.PrependUint32(ask)
	builder.PrependUint32(bid)
	builder.Prep(4, 12)
	builder.Pad(2)
	builder.PrependByte(ts_dst)
	builder.PrependInt8(ts_offset)
	builder.PrependUint32(ts_ns)
	builder.PrependUint32(ts_unix)
	return builder.Offset()
}
